{"version":3,"sources":["../../src/models/index.js"],"names":["Account","sequelize","define","id","type","DataTypes","INTEGER","autoIncrement","primaryKey","email","STRING","allowNull","password","Item","name","ean","image","external_id","brand","description","vendor","categories","dataVersion","defaultValue","Home","AccountId","references","model","key","HomeItem","Sequelize","hasOne","foreignKey","belongsTo","belongsToMany","through","hasMany"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;AACA,IAAMA,UAAUC,aAAUC,MAAV,CAAiB,SAAjB,EAA4B;AACxCC,QAAI;AACAC,cAAMC,qBAAUC,OADhB;AAEAC,uBAAe,IAFf;AAGAC,oBAAY;AAHZ,KADoC;AAMxCC,WAAO;AACHL,cAAMC,qBAAUK,MADb;AAEHC,mBAAW;AAFR,KANiC;AAUxCC,cAAU;AACNR,cAAMC,qBAAUK,MADV;AAENC,mBAAW;AAFL;AAV8B,CAA5B,CAAhB;;AAgBA;AACA,IAAME,OAAOZ,aAAUC,MAAV,CAAiB,MAAjB,EAAyB;AAClCC,QAAI;AACAC,cAAMC,qBAAUC,OADhB;AAEAC,uBAAe,IAFf;AAGAC,oBAAY;AAHZ,KAD8B;AAMlCM,UAAM;AACFV,cAAMC,qBAAUK,MADd;AAEFC,mBAAW;AAFT,KAN4B;AAUlCI,SAAK;AACDX,cAAMC,qBAAUK,MADf;AAEDC,mBAAW;AAFV,KAV6B;AAclCK,WAAO;AACHZ,cAAMC,qBAAUK,MAAV,CAAiB,IAAjB;AADH,KAd2B;AAiBlCO,iBAAa;AACTb,cAAMC,qBAAUK;AADP,KAjBqB;AAoBlCQ,WAAO;AACHd,cAAMC,qBAAUK;AADb,KApB2B;AAuBlCS,iBAAa;AACTf,cAAMC,qBAAUK,MAAV,CAAiB,IAAjB;AADG,KAvBqB;AA0BlCU,YAAQ;AACJhB,cAAMC,qBAAUK;AADZ,KA1B0B;AA6BlCW,gBAAY;AACRjB,cAAMC,qBAAUK,MAAV,CAAiB,IAAjB;AADE,KA7BsB;AAgClCY,iBAAa;AACTlB,cAAMC,qBAAUK,MADP;AAETa,sBAAc;AAFL;AAhCqB,CAAzB,CAAb;;AAsCA;AACA,IAAMC,OAAOvB,aAAUC,MAAV,CAAiB,MAAjB,EAAyB;AAClCC,QAAI;AACAC,cAAMC,qBAAUC,OADhB;AAEAC,uBAAe,IAFf;AAGAC,oBAAY;AAHZ,KAD8B;AAMlCiB,eAAW;AACPrB,cAAMC,qBAAUC,OADT;AAEPK,mBAAW,KAFJ;AAGPe,oBAAY;AACRC,mBAAO,UADC;AAERC,iBAAK;AAFG;AAHL;AANuB,CAAzB,CAAb;;AAgBA,IAAMC,WAAW5B,aAAUC,MAAV,CAAiB,UAAjB,EAA6B;AAC1C;AACAC,QAAI;AACAC,cAAM0B,qBAAUxB,OADhB;AAEAE,oBAAY,IAFZ;AAGAD,uBAAe;AAHf;AAFsC,CAA7B,CAAjB;;AASA;AACAP,QAAQ+B,MAAR,CAAeP,IAAf,EAAqB,EAAEQ,YAAY,WAAd,EAArB;AACAR,KAAKS,SAAL,CAAejC,OAAf,EAAwB,EAAEgC,YAAY,WAAd,EAAxB;;AAEAR,KAAKU,aAAL,CAAmBrB,IAAnB,EAAyB,EAAEsB,SAAS,UAAX,EAAzB;AACAtB,KAAKqB,aAAL,CAAmBV,IAAnB,EAAyB,EAAEW,SAAS,UAAX,EAAzB;;AAEAN,SAASI,SAAT,CAAmBpB,IAAnB,EAAyB,EAAEmB,YAAY,QAAd,EAAzB;AACAnB,KAAKuB,OAAL,CAAaP,QAAb,EAAuB,EAAEG,YAAY,QAAd,EAAvB;;QAIShC,O,GAAAA,O;QAASwB,I,GAAAA,I;QAAMX,I,GAAAA,I;QAAMgB,Q,GAAAA,Q","file":"index.js","sourcesContent":["import { Sequelize, DataTypes } from 'sequelize';\nimport sequelize from '../db';\n\n// Account model\nconst Account = sequelize.define('Account', {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    email: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    password: {\n        type: DataTypes.STRING,\n        allowNull: false\n    }\n});\n\n// Item model\nconst Item = sequelize.define('Item', {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    name: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    ean: {\n        type: DataTypes.STRING,\n        allowNull: false\n    },\n    image: {\n        type: DataTypes.STRING(1000)\n    },\n    external_id: {\n        type: DataTypes.STRING\n    },\n    brand: {\n        type: DataTypes.STRING\n    },\n    description: {\n        type: DataTypes.STRING(1000)\n    },\n    vendor: {\n        type: DataTypes.STRING\n    },\n    categories: {\n        type: DataTypes.STRING(1000)\n    },\n    dataVersion: {\n        type: DataTypes.STRING,\n        defaultValue: 'v1'\n    }\n});\n\n// Home model\nconst Home = sequelize.define('Home', {\n    id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true\n    },\n    AccountId: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n            model: 'Accounts',\n            key: 'id'\n        },\n    },\n});\n\nconst HomeItem = sequelize.define('HomeItem', {\n    // Primary Key for the join table, if you want a specific one\n    id: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true\n    }\n});\n\n// Define associations\nAccount.hasOne(Home, { foreignKey: 'AccountId' });\nHome.belongsTo(Account, { foreignKey: 'AccountId' });\n\nHome.belongsToMany(Item, { through: 'HomeItem' });\nItem.belongsToMany(Home, { through: 'HomeItem' });\n\nHomeItem.belongsTo(Item, { foreignKey: 'ItemId' });\nItem.hasMany(HomeItem, { foreignKey: 'ItemId' });\n\n\n\nexport { Account, Home, Item, HomeItem };\n"]}