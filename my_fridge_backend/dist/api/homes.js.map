{"version":3,"sources":["../../src/api/homes.js"],"names":["require","nanoId","config","api","use","jwtAuth","wrap","fn","catch","post","req","res","AccountId","account","id","Home","findOne","where","home","json","message","create","console","error","status","get","HomeItem","findAll","HomeId","include","model","Item","homeItems","ean","body","length","item","dataVersion","kassalClient","response","data","products","product","categories","category","map","name","join","destroy","image","external_id","brand","description","vendor","ItemId","existingHomeItem","homeItem","find","exactMatchHomeItem","similarItems","currentItem","Promise","all","items","filter","similarItem","split","some","includes"],"mappings":"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","file":"homes.js","sourcesContent":["'use strict';\nrequire('babel-polyfill');\nconst nanoId = require('nanoid');\nimport { Account, Home, Item, HomeItem } from '../models';\nimport { jwtAuth } from '../jwt';\nimport { Router } from 'express';\n\nexport default ({ config }) => {\n    let api = Router().use(jwtAuth);\n\n    let wrap = fn => (...args) => fn(...args).catch(args[2]);\n\n    api.post('/create', wrap(async (req, res) => {\n        const AccountId = req.account.id;  // Extract AccountId from token\n\n        try {\n            // Check if a Home already exists for the given AccountId\n            const home = await Home.findOne({ where: { AccountId } });\n            if (home) {\n                res.json({ message: 'Home already exists.' });\n            } else {\n                // Create a new Home with the AccountId extracted from the token\n                await Home.create({ AccountId });\n                res.json({ message: 'Home created.' });\n            }\n        } catch (error) {\n            console.error('Error creating home:', error);\n            res.status(500).json({ message: 'Internal server error.' });\n        }\n    }));\n\n    api.get('/', wrap(async (req, res) => {\n        const AccountId = req.account.id;  // Extract AccountId from the JWT\n\n        try {\n            // Fetch the Home associated with the AccountId\n            const home = await Home.findOne({ where: { AccountId } });\n            if (home) {\n                // If a home exists, fetch all related HomeItems and their corresponding Items\n                let homeItems = await HomeItem.findAll({\n                    where: { HomeId: home.id }, // Assuming homeId is the correct column name\n                    include: [{ model: Item }] // Ensure Item is associated in your model definitions\n                });\n                res.json({ home, homeItems });\n            } else {\n                res.json({ message: 'Home not found.' });\n            }\n        } catch (error) {\n            console.error('Error fetching home:', error);\n            res.status(500).json({ message: 'Internal server error.' });\n        }\n    }));\n\n    api.post('/add-item', wrap(async (req, res) => {\n        const { ean } = req.body;\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.json({ message: 'Invalid EAN.' });\n                return;\n            }\n\n            let item = await Item.findOne({ where: { ean } });\n\n            if (!item || item.dataVersion !== config.dataVersion) {\n                const response = await config.kassalClient.get(`/api/v1/products/ean/${ean}`);\n                const data = response && response.data && response.data.data || null;\n                if (data && data.products && data.products.length > 0) {\n                    const product = data.products[0];\n                    let categories = \"\"\n                    if (product.category && product.category.length > 0) {\n                        categories = product.category.map(category => category.name).join(',');\n                    }\n                    if (item && item.dataVersion !== config.dataVersion) {\n                        await Item.destroy({ where: { ean } });\n                    }\n                    item = await Item.create({\n                        ean,\n                        name: product.name,\n                        image: product.image,\n                        external_id: product.id,\n                        brand: product.brand,\n                        description: product.description,\n                        vendor: product.vendor,\n                        categories,\n                        dataVersion: config.dataVersion\n                    });\n                }\n            }\n\n            // Assuming a single home per account\n            const home = await Home.findOne({ where: { AccountId: req.account.id } });\n            if (home && item) {\n                const existingHomeItem = await HomeItem.findOne({ where: { HomeId: home.id, ItemId: item.id } });\n                if (existingHomeItem) {\n                    res.json({ message: 'Item already exists in home.' });\n                } else {\n                    await HomeItem.create({ HomeId: home.id, ItemId: item.id });\n                    res.json({ message: 'Item added to home.' });\n                }\n            } else {\n                res.json({ message: 'Home not found.' });\n            }\n        } catch (error) {\n            console.error('Error adding item to home:', error);\n            res.status(500).json({ message: 'Internal server error.' });\n        }\n    }));\n\n\n    api.post('/remove-item', wrap(async (req, res) => {\n        const { ean } = req.body;\n\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.json({ message: 'Invalid EAN.' });\n                return;\n            }\n\n            const item = await Item.findOne({ where: { ean } });\n            if (!item) {\n                res.json({ message: 'Item not found.' });\n                return;\n            }\n\n            // Assuming a single home per account\n            const home = await Home.findOne({ where: { AccountId: req.account.id } });\n            if (!home) {\n                res.json({ message: 'Home not found.' });\n                return;\n            }\n\n            // Check if the item exists in the home\n            const existingHomeItem = await HomeItem.findOne({ where: { HomeId: home.id, ItemId: item.id } });\n            if (!existingHomeItem) {\n                res.json({ message: 'Item not found in home.' });\n                return;\n            }\n\n            // Remove the item from the home\n            await HomeItem.destroy({ where: { id: existingHomeItem.id } });\n            res.json({ message: 'Item removed from home.' });\n\n        } catch (error) {\n            console.error('Error removing item from home:', error);\n            res.status(500).json({ message: 'Internal server error.' });\n        }\n    }));\n\n\n    api.post('/check-item', wrap(async (req, res) => {\n        const { ean } = req.body;\n\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.json({ message: 'Invalid EAN.' });\n                return;\n            }\n\n            let item = await Item.findOne({ where: { ean } });\n            if (!item || item.dataVersion !== config.dataVersion) {\n                const response = await config.kassalClient.get(`/api/v1/products/ean/${ean}`);\n                const data = response && response.data && response.data.data || null;\n                if (data && data.products && data.products.length > 0) {\n                    const product = data.products[0];\n                    const categories = product.category.map(category => category.name).join(',');\n                    if (item && item.dataVersion !== config.dataVersion) {\n                        await Item.destroy({ where: { ean } });\n                    }\n                    item = await Item.create({\n                        ean,\n                        name: product.name,\n                        image: product.image,\n                        external_id: product.id,\n                        brand: product.brand,\n                        description: product.description,\n                        vendor: product.vendor,\n                        categories,\n                        dataVersion: config.dataVersion\n                    });\n                }\n            }\n\n            if (item) {\n                // Assuming a single home per account\n                const home = await Home.findOne({ where: { AccountId: req.account.id } });\n                if (home) {\n                    const homeItems = await HomeItem.findAll({\n                        where: { HomeId: home.id }, // Assuming homeId is the correct column name\n                        include: [{ model: Item }] // Ensure Item is associated in your model definitions\n                    });\n                    const homeItem = homeItems.find(homeItem => homeItem.ItemId === item.id);\n                    let response = { message: '', exactMatchHomeItem: null, similarItems: [], currentItem: item };\n                    if (homeItem) {\n                        response.message = 'Item is in home.';\n                        response.exactMatchHomeItem = homeItem;\n                    } else {\n                        response.message = 'Item is not in home.';\n                    }\n                    const items = await Promise.all(homeItems.map(async homeItem => {\n                        return await Item.findOne({ where: { id: homeItem.ItemId } });\n                    }));\n                    let similarItems = items.filter(similarItem => similarItem.categories.split(',').some(category => item.categories.split(',').includes(category)));\n                    response.similarItems = similarItems.filter(similarItem => similarItem.ean !== item.ean);\n                    if (response.similarItems.length > 0) {\n                        response.message = 'Item is not in home, but similar items were found.';\n                    }\n                    res.json(response);\n                } else {\n                    res.json({ message: 'Home not found.' });\n                }\n            } else {\n                res.json({ message: 'Item not found.' });\n            }\n        } catch (error) {\n            console.error('Error checking item in home:', error);\n            res.status(500).json({ message: 'Internal server error.' });\n        }\n    }));\n\n\n    return api;\n};\n"]}