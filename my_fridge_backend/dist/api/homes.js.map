{"version":3,"sources":["../../src/api/homes.js"],"names":["require","nanoId","config","api","use","jwtAuth","wrap","fn","catch","post","req","res","AccountId","account","id","Home","findOne","where","home","status","json","message","success","create","console","error","get","HomeItem","findAll","HomeId","include","model","Item","homeItems","ean","body","length","item","dataVersion","kassalClient","response","data","products","product","categories","category","map","name","join","destroy","image","external_id","brand","description","vendor","ItemId","existingHomeItem","delete","homeItem","find","exactMatchHomeItem","similarItems","currentItem","Promise","all","items","filter","similarItem","split","some","includes"],"mappings":"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","file":"homes.js","sourcesContent":["'use strict';\nrequire('babel-polyfill');\nconst nanoId = require('nanoid');\nimport { Account, Home, Item, HomeItem } from '../models';\nimport { jwtAuth } from '../jwt';\nimport { Router } from 'express';\n\nexport default ({ config }) => {\n    let api = Router().use(jwtAuth);\n\n    let wrap = fn => (...args) => fn(...args).catch(args[2]);\n\n    api.post('/create', wrap(async (req, res) => {\n        const AccountId = req.account.id;  // Extract AccountId from token\n\n        try {\n            // Check if a Home already exists for the given AccountId\n            const home = await Home.findOne({ where: { AccountId } });\n            if (home) {\n                res.status(409).json({ message: 'Home already exists.', success: false });\n            } else {\n                // Create a new Home with the AccountId extracted from the token\n                await Home.create({ AccountId });\n                res.status(201).json({ message: 'Home created.', success: true });\n            }\n        } catch (error) {\n            console.error('Error creating home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n    api.get('/', wrap(async (req, res) => {\n        const AccountId = req.account.id;  // Extract AccountId from the JWT\n\n        try {\n            // Fetch the Home associated with the AccountId\n            const home = await Home.findOne({ where: { AccountId } });\n            if (home) {\n                // If a home exists, fetch all related HomeItems and their corresponding Items\n                let homeItems = await HomeItem.findAll({\n                    where: { HomeId: home.id }, // Assuming homeId is the correct column name\n                    include: [{ model: Item }] // Ensure Item is associated in your model definitions\n                });\n                res.json({ home, homeItems, message: \"Found home\", success: true });\n            } else {\n                res.status(404).json({ message: 'Home not found.', success: false });\n            }\n        } catch (error) {\n            console.error('Error fetching home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n    api.post('/add-item-by-ean', wrap(async (req, res) => {\n        const { ean } = req.body;\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.status(400).json({ message: 'Invalid EAN.', success: false });\n                return;\n            }\n\n            let item = await Item.findOne({ where: { ean } });\n\n            if (!item || item.dataVersion !== config.dataVersion) {\n                const response = await config.kassalClient.get(`/api/v1/products/ean/${ean}`);\n                const data = response && response.data && response.data.data || null;\n                if (data && data.products && data.products.length > 0) {\n                    const product = data.products[0];\n                    let categories = \"\"\n                    if (product.category && product.category.length > 0) {\n                        categories = product.category.map(category => category.name).join(',');\n                    }\n                    if (item && item.dataVersion !== config.dataVersion) {\n                        await Item.destroy({ where: { ean } });\n                    }\n                    item = await Item.create({\n                        ean,\n                        name: product.name,\n                        image: product.image,\n                        external_id: product.id,\n                        brand: product.brand,\n                        description: product.description,\n                        vendor: product.vendor,\n                        categories,\n                        dataVersion: config.dataVersion\n                    });\n                }\n            }\n\n            // Assuming a single home per account\n            const home = await Home.findOne({ where: { AccountId: req.account.id } });\n            if (home && item) {\n                const existingHomeItem = await HomeItem.findOne({ where: { HomeId: home.id, ItemId: item.id } });\n                if (existingHomeItem) {\n                    res.status(409).json({ message: 'Item already exists in home.', success: false });\n                } else {\n                    await HomeItem.create({ HomeId: home.id, ItemId: item.id });\n                    res.status(200).json({ message: 'Item added to home.', success: true });\n                }\n            } else {\n                res.status(404).json({ message: 'Home not found.', success: false });\n            }\n        } catch (error) {\n            console.error('Error adding item to home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n    api.delete('/remove-item-by-ean', wrap(async (req, res) => {\n        const { ean } = req.body;\n\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.status(400).json({ message: 'Invalid EAN.', success: false });\n                return;\n            }\n\n            const item = await Item.findOne({ where: { ean } });\n            if (!item) {\n                res.status(404).json({ message: 'Item not found.', success: false });\n                return;\n            }\n\n            // Assuming a single home per account\n            const home = await Home.findOne({ where: { AccountId: req.account.id } });\n            if (!home) {\n                res.status(404).json({ message: 'Home not found.', success: false });\n                return;\n            }\n\n            // Check if the item exists in the home\n            const existingHomeItem = await HomeItem.findOne({ where: { HomeId: home.id, ItemId: item.id } });\n            if (!existingHomeItem) {\n                res.status(404).json({ message: 'Item not found in home.', success: false });\n                return;\n            }\n\n            // Remove the item from the home\n            await HomeItem.destroy({ where: { id: existingHomeItem.id } });\n            res.status(200).json({ message: 'Item removed from home.', success: true });\n\n        } catch (error) {\n            console.error('Error removing item from home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n\n    // remove item from kitchen by id\n    api.delete('/remove-item-by-id', wrap(async (req, res) => {\n        const { id } = req.body;\n\n        try {\n            const homeItem = await HomeItem.findOne({ where: { id } });\n            if (!homeItem) {\n                res.status(404).json({ message: 'Item not found.', success: false });\n                return;\n            }\n\n            // Assuming a single home per account\n            const home = await Home.findOne({ where: { AccountId: req.account.id } });\n            if (!home) {\n                res.status(404).json({ message: 'Home not found.', success: false });\n                return;\n            }\n\n            // Check if the item exists in the home\n            const existingHomeItem = await HomeItem.findOne({ where: { HomeId: home.id, ItemId: homeItem.ItemId } });\n            if (!existingHomeItem) {\n                res.status(404).json({ message: 'Item not found in home.', success: false });\n                return;\n            }\n\n            // Remove the item from the home\n            await HomeItem.destroy({ where: { id } });\n            res.status(200).json({ message: 'Item removed from home.', success: true });\n\n        } catch (error) {\n            console.error('Error removing item from home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n    api.post('/check-item', wrap(async (req, res) => {\n        const { ean } = req.body;\n\n        try {\n            if (ean.length !== 13 && ean.length !== 8) {\n                res.status(400).json({ message: 'Invalid EAN.', success: false });\n                return;\n            }\n\n            let item = await Item.findOne({ where: { ean } });\n\n            if (!item || item.dataVersion !== config.dataVersion) {\n\n                try {\n                    const response = await config.kassalClient.get(`/api/v1/products/ean/${ean}`);\n                    const data = response && response.data && response.data.data || null;\n                    if (data && data.products && data.products.length > 0) {\n                        const product = data.products[0];\n                        const categories = product.category.map(category => category.name).join(',');\n                        if (item && item.dataVersion !== config.dataVersion) {\n                            await Item.destroy({ where: { ean } });\n                        }\n                        item = await Item.create({\n                            ean,\n                            name: product.name,\n                            image: product.image,\n                            external_id: product.id,\n                            brand: product.brand,\n                            description: product.description,\n                            vendor: product.vendor,\n                            categories,\n                            dataVersion: config.dataVersion\n                        });\n                    }\n                } catch (error) {\n                    res.status(404).json({ message: 'Item not found.', success: false });\n                    return;\n                }\n            }\n\n            if (item) {\n                // Assuming a single home per account\n                const home = await Home.findOne({ where: { AccountId: req.account.id } });\n                if (home) {\n                    const homeItems = await HomeItem.findAll({\n                        where: { HomeId: home.id }, // Assuming homeId is the correct column name\n                        include: [{ model: Item }] // Ensure Item is associated in your model definitions\n                    });\n                    const homeItem = homeItems.find(homeItem => homeItem.ItemId === item.id);\n                    let response = { message: '', exactMatchHomeItem: null, similarItems: [], currentItem: item, success: true };\n                    if (homeItem) {\n                        response.message = 'Item is in home.';\n                        response.exactMatchHomeItem = homeItem;\n                    } else {\n                        response.message = 'Item is not in home.';\n                    }\n                    const items = await Promise.all(homeItems.map(async homeItem => {\n                        return await Item.findOne({ where: { id: homeItem.ItemId } });\n                    }));\n                    let similarItems = items.filter(similarItem => similarItem.categories.split(',').some(category => item.categories.split(',').includes(category)));\n                    response.similarItems = similarItems.filter(similarItem => similarItem.ean !== item.ean);\n                    if (response.similarItems.length > 0 && response.message === 'Item is not in home.') {\n                        response.message = 'Item is not in home, but similar items were found.';\n                    }\n                    res.status(200).json(response);\n                } else {\n                    res.status(404).json({ message: 'Home not found.', success: false });\n                }\n            } else {\n                res.status(404).json({ message: 'Item not found.', success: false });\n            }\n        } catch (error) {\n            //console.error('Error checking item in home:', error);\n            res.status(500).json({ message: 'Internal server error.', success: false });\n        }\n    }));\n\n\n    return api;\n};\n"]}